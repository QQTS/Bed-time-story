功能：在终端输入x 10 $esp时，求出表达式EXPR的值, 将结果作为起始内存地址, 以十六进制形式输出连续的10个4字节.
1.  在"nemu/src/monitor/sdb/expr.c"中，定义了一个枚举类型，其中包含了几个标记类型，如 TK_NOTYPE 和 TK_EQ。代码中还有一个注释提示可以添加更多的标记类型。
    
    接下来，代码定义了一个名为 rule 的结构体，它包含两个成员：const char *regex 和 int token_type。
    
    然后，代码定义了一个名为 rules 的结构体数组，其中包含了几条规则。每条规则都包含一个正则表达式和一个对应的标记类型（优先级）。
    
    然后，代码定义了一个宏 NR_REGEX，它的值等于 rules 数组的长度。
    
    接着，代码定义了一个名为 re 的静态数组，它的类型为 regex_t，长度为 NR_REGEX。
    
    最后，代码定义了一个名为 init_regex 的函数，它不接受任何参数。
    函数内部定义了三个变量：i，error_msg 和 ret。
    然后，代码使用一个 for 循环遍历 NR_REGEX 个正则表达式。
    在循环内部，代码调用 regcomp 函数编译正则表达式，并将结果存储在 re[i] 中。
    如果编译失败，则调用 regerror 函数获取错误信息，并将其存储在 error_msg 中。然后，调用 panic 函数输出错误信息并终止程序。

    之后代码定义了一个名为 token 的结构体，它包含两个成员：int type 和 char str[32]。

    然后，代码定义了一个名为 tokens 的静态数组，它的类型为 Token，长度为 32。
   
    接着，代码定义了一个名为 nr_token 的静态变量，它的初始值为 0。

    接下来，代码定义了一个名为 make_token 的函数，它接受一个参数：char *e。函数内部定义了三个变量：position，i 和 pmatch。然后，代码将 nr_token 设为 0。
    函数内部 while 循环遍历字符串 e 中的每个字符。
    在循环内部，代码使用一个 for 循环遍历所有的正则表达式规则。
    对于每条规则，代码调用 regexec 函数检查字符串 e + position 是否与正则表达式匹配。
    如果匹配，则获取匹配的子字符串的起始位置和长度，并调用 Log 函数输出匹配信息。然后，将 position 增加匹配子字符串的长度。
    接下来，代码使用一个 switch 语句根据匹配到的规则类型执行相应的操作。目前，这个 switch 语句中只有一个 default 分支，它调用了 TODO 函数。
    最后，如果所有规则都不匹配，则输出错误信息并返回 false。

    在代码的末尾还定义了一个名为 expr 的函数，它接受两个参数：char *e 和 bool *success。
    函数内部首先调用 make_token 函数对字符串进行分词。如果分词失败，则将 *success 设为 false 并返回 0。否则，调用 TODO 函数计算表达式的值。
